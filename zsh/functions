function t() {
  emulate -L zsh

  if [ -x .tmux ]; then
    ./.tmux
    return
  else
    tmux new-session
  fi
}

function extract() {
  if [[ -z "$1" ]]; then
    print -P "usage: \e[1;36mextract\e[1;0m < filename >"
    print -P "\t Extract the file specified based on extension"
  elif [[ -f "$1" ]]; then
    case ${(L)1} in
      *.tar.xz)   tar -Jxf $1 ;;
      *.tar.bz2)  tar -jxvf $1 ;;
      *.tar.gz)   tar -zxvf $1 ;;
      *.bz2)      bunzip2 $1 ;;
      *.gz)       gunzip $1 ;;
      *.jar)      unzip $1 ;;
      *.rar)      unrar x $1 ;;
      *.tar)      tar -xvf $1 ;;
      *.tbz2)     tar -jxvf $1 ;;
      *tgz)       tar -zxvf $1 ;;
      *.zip)      unzip $1 ;;
      *.Z)        uncompress $1 ;;
      *.7z)       7za e $1 ;;
      *)          echo "Unable to extract '$1' :: Unknown extension"
    esac
  else
    echo "File ('$1') does not exist"
  fi
}

MARKPATH=~/.marks

hash -d log=/var/log
hash -d doc=/usr/share/doc

for link ($MARKPATH/*(N@)) {
  hash -d -- -${link:t}=${link:A}
}

vbe-insert-bookmark() {
  emulate -L zsh
  LBFFER=${LBUFFER}"~-"
}
zle -N vbe-insert-bookmark
bindkey '@@' vbe-insert-bookmark

bookmark() {
    [[ -d $MARKPATH ]] || mkdir -p $MARKPATH
    if (( $# == 0 )); then
        # When no arguments are provided, just display existing
        # bookmarks
        for link in $MARKPATH/*(N@); do
            local markname="$fg[green]${link:t}$reset_color"
            local markpath="$fg[blue]${link:A}$reset_color"
            printf "%-30s -> %s\n" $markname $markpath
        done
    else
        # Otherwise, we may want to add a bookmark or delete an
        # existing one.
        local -a delete
        zparseopts -D d=delete
        if (( $+delete[1] )); then
            # With `-d`, we delete an existing bookmark
            command rm $MARKPATH/$1
        else
            # Otherwise, add a bookmark to the current
            # directory. The first argument is the bookmark
            # name. `.` is special and means the bookmark should
            # be named after the current directory.
            local name=$1
            [[ $name == "." ]] && name=${PWD:t}
            ln -s $PWD $MARKPATH/$name
            hash -d -- -${name}=${PWD}
        fi
    fi
}

